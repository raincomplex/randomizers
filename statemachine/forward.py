'''
https://en.wikipedia.org/wiki/Forward_algorithm
https://web.stanford.edu/~jurafsky/slp3/ -- Speech and Language Processing, appendix chapter A. Hidden Markov Models
'''
import util, math

def forward(machine, seq, start):
    '''
    start = {state: weight}
    return log_2(probability that seq is generated by machine)
    '''
    # we need to eliminate any noncyclic states so that we can reverse the machine cleanly
    machine = util.prune(machine)
    comefrom = util.reverse(machine)

    col = start
    total = sum(col.values())
    if total <= 0:
        raise ValueError('start weights must sum to positive value')
    col = {s: col.get(s, 0) / total for s in machine}

    tpcache = {}  # {(sp, s, c): prob}

    exp = 0
    for c in seq:
        new = {}
        for s in machine:
            t = 0
            for sp in comefrom[s]:
                prob = tpcache.get((sp, s, c))
                if prob is None:
                    prob = machine[sp].get((c, s), 0) / sum(machine[sp].values())
                    tpcache[sp, s, c] = prob
                t += col[sp] * prob
            new[s] = t
        col = new

        # normalize to keep exponents within floating point range
        m = max(col.values())
        if m == 0:
            break  # can't be in any state
        exp += math.log(m, 2)
        col = {s: prob / m for s, prob in col.items()}

    s = sum(col.values())
    if s == 0:
        return -math.inf
    return exp + math.log(s, 2)
